#include <iostream>
#include <stdlib.h>
#include <time.h>
 
using namespace std;
 
#define row 10
#define col 10
 
int randNumber (int,int, int, int);
void checkInput();
void viewArray (int [row][col],int,int);
void generateArray (int [row][col],int,int);
 
 
int main()
{
	srand(time(NULL));
	int resultSudoku[row][col];
	string input = "a";
 
	cout<<"Welcome to Sudoku Game"<<endl;
 
	cout<<"Press s to view solution: ";
	checkInput();
 
	do {
    cout<<endl;
 
	generateArray(resultSudoku, row, col);
	viewArray(resultSudoku, row, col);
 
	cout<<endl;
 
    cout<<"Press a to view another solution or x to exit: ";
    cin>>input;
	} while (input == "a");
 
	return 0;
}
 
int randNumber(int low,int high)
{
    if (low == high)
    {
        return low;
    }
    else {
        return (rand()%(high - low + 1)+ low);
    }
}
 
void checkInput()
{
    string inputCommand;
    cin >> inputCommand;
    for (int i = 0; true; i++) {
        if (inputCommand != "s") {
            cout << "Press s to view solution: ";
            cin >> inputCommand;
        } else {
            break;
        }
    }
}
 
void viewArray(int data[row][col],int x,int y)
{
    for(int i = 0; i<x; i++)
    {
        for(int j = 0; j<y; j++)
        {
            cout<<data[i][j]<<" ";
        }
        cout<<endl;
    }
}
 
void generateArray(int data[row][col],int x,int y) {
    for(int i = 0; i<x; i++)
    {
        for( int j = 0; j<y; j++) {
            data[i][j]= randNumber(1, 9);
        }
    }
}

/* C implementation QuickSort */
#include <iostream>
#include <stdlib.h>
#include <time.h>

using namespace std;

#define row 10
#define col 10
// A utility function to swap two elements
// void swap(int* a, int* b)
// {
//     int t = *a;
//     *a = *b;
//     *b = t;
// }
 
// /* This function takes last element as pivot, places
//    the pivot element at its correct position in sorted
//     array, and places all smaller (smaller than pivot)
//    to left of pivot and all greater elements to right
//    of pivot */
// int partition (int arr[], int low, int high)
// {
//     int pivot = arr[high];    // pivot
//     int i = (low - 1);  // Index of smaller element
 
//     for (int j = low; j <= high- 1; j++)
//     {
//         // If current element is smaller than or
//         // equal to pivot
//         if (arr[j] <= pivot)
//         {
//             i++;    // increment index of smaller element
//             swap(&arr[i], &arr[j]);
//         }
//     }
//     swap(&arr[i + 1], &arr[high]);
//     return (i + 1);
// }
 
// /* The main function that implements QuickSort
//  arr[] --> Array to be sorted,
//   low  --> Starting index,
//   high  --> Ending index */
// void quickSort(int arr[], int low, int high)
// {
//     if (low < high)
//     {
//         /* pi is partitioning index, arr[p] is now
//            at right place */
//         int pi = partition(arr, low, high);
 
//         // Separately sort elements before
//         // partition and after partition
//         quickSort(arr, low, pi - 1);
//         quickSort(arr, pi + 1, high);
//     }
// }
 
// /* Function to print an array */
// void printArray(int arr[], int size)
// {
//     int i;
//     for (i=0; i < size; i++)
//         printf("%d ", arr[i]);
//     printf("\n");
// }
 
// Driver program to test above functions

int randNumber(int low,int high)
{
    if (low == high)
    {
        return low;
    }
    else {
        return (rand()%(high - low + 1)+ low);
    }
}

void generateArray(int data[row][col],int x,int y) {
    for(int i = 0; i<x; i++)
    {
        for( int j = 0; j<y; j++) {
            data[i][j]= randNumber(1, 9);
        }
    }
}

void viewArray(int data[row][col],int x,int y)
{
    for(int i = 0; i<x; i++)
    {
        for(int j = 0; j<y; j++)
        {
            cout << data[i][j]<<" ";
        }
        cout<<endl;
    }
}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr)/sizeof(arr[0]);
    // quickSort(arr, 0, n-1);
    printf("Sorted array: \n");
    int resultSudoku[row][col];
    generateArray(resultSudoku, row, col);
    viewArray(resultSudoku, row, col);
    // printArray(arr, n);
    return 0;
}